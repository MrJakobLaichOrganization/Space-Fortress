name: CI

on: [push, pull_request, workflow_dispatch]

concurrency:
  group: environment-${{github.ref}}
  cancel-in-progress: true

env:
  DISPLAY: ":99" # Display number to use for the X server
  GALLIUM_DRIVER: llvmpipe # Use Mesa 3D software OpenGL renderer

defaults:
  run:
    shell: bash

jobs:
  build:
    name: ${{ matrix.platform.name }} ${{ matrix.config.name }} ${{ matrix.type.name }}
    runs-on: ${{ matrix.platform.os }}

    env:
      CMAKE_CXX_COMPILER_LAUNCHER: ccache # Use ccache to cache C++ compiler output
      HOMEBREW_NO_INSTALLED_DEPENDENTS_CHECK: "1" # Work around Homebrew errors within coverallsapp/github-action@v2

    strategy:
      fail-fast: false
      matrix:
        platform:
        - { name: Windows VS2019 x86,             os: windows-2019, flags: -DSFML_USE_MESA3D=TRUE -GNinja }
        - { name: Windows VS2019 x64,             os: windows-2019, flags: -DSFML_USE_MESA3D=TRUE -GNinja }
        - { name: Windows VS2022 x86,             os: windows-2022, flags: -DSFML_USE_MESA3D=TRUE -GNinja }
        - { name: Windows VS2022 x64,             os: windows-2022, flags: -DSFML_USE_MESA3D=TRUE -GNinja }
        - { name: Windows VS2022 ClangCL MSBuild, os: windows-2022, flags: -DSFML_USE_MESA3D=TRUE -T ClangCL } # ninja doesn't support specifying the toolset, so use the ClangCL toolset to test building with MSBuild as well
        - { name: Windows VS2022 Unity,           os: windows-2022, flags: -DSFML_USE_MESA3D=TRUE -DCMAKE_UNITY_BUILD=ON -GNinja }
        - { name: Windows LLVM/Clang,             os: windows-2022, flags: -DSFML_USE_MESA3D=TRUE -DCMAKE_CXX_COMPILER=clang++ -GNinja }
        - { name: Windows MinGW,                  os: windows-2022, flags: -DSFML_USE_MESA3D=TRUE -DCMAKE_CXX_COMPILER=g++ -GNinja }
        - { name: Linux GCC,                      os: ubuntu-22.04, flags: -GNinja }
        - { name: Linux Clang,                    os: ubuntu-22.04, flags: -DCMAKE_CXX_COMPILER=clang++ -GNinja }
        - { name: macOS x64,                      os: macos-12, flags: -GNinja }
        - { name: macOS x64 Xcode,                os: macos-12, flags: -GXcode }
        - { name: macOS arm64,                    os: macos-14, flags: -GNinja -DSFML_RUN_AUDIO_DEVICE_TESTS=OFF }
        config:
        - { name: Shared, flags: -DBUILD_SHARED_LIBS=TRUE }
        - { name: Static, flags: -DBUILD_SHARED_LIBS=FALSE }
        type:
        - { name: Release }
        - { name: Debug, flags: -DCMAKE_BUILD_TYPE=Debug }

        include:
        - platform: { name: Windows VS2022 x64, os: windows-2022 }
          config: { name: Static with PCH (MSVC), flags: -DSFML_USE_MESA3D=TRUE -GNinja -DBUILD_SHARED_LIBS=FALSE -DSFML_ENABLE_PCH=1 }
        - platform: { name: Linux GCC, os: ubuntu-22.04 }
          config: { name: Static with PCH (GCC), flags: -GNinja -DCMAKE_CXX_COMPILER=g++ -DBUILD_SHARED_LIBS=FALSE -DSFML_ENABLE_PCH=1 }
        - platform: { name: Linux Clang, os: ubuntu-22.04 }
          config: { name: Static with PCH (Clang), flags: -GNinja -DCMAKE_CXX_COMPILER=clang++ -DBUILD_SHARED_LIBS=FALSE -DSFML_ENABLE_PCH=1 }
        - platform: { name: Windows MinGW, os: windows-2022 }
          config: { name: Static Standard Libraries, flags: -GNinja -DSFML_USE_MESA3D=TRUE -DCMAKE_CXX_COMPILER=g++ -DSFML_USE_STATIC_STD_LIBS=TRUE }
        - platform: { name: Windows MinGW, os: windows-2022 }
          config: { name: Static with PCH (GCC), flags: -GNinja -DSFML_USE_MESA3D=TRUE -DCMAKE_CXX_COMPILER=g++ -DBUILD_SHARED_LIBS=FALSE -DSFML_ENABLE_PCH=1 -DSFML_ENABLE_STDLIB_ASSERTIONS=FALSE } # disabling stdlib assertions due to false positive
        - platform: { name: macOS, os: macos-12 }
          config: { name: Frameworks, flags: -GNinja -DSFML_BUILD_FRAMEWORKS=TRUE -DBUILD_SHARED_LIBS=TRUE }
        - platform: { name: macOS , os: macos-12 }
          config: { name: System Deps, flags: -GNinja -DBUILD_SHARED_LIBS=TRUE -DSFML_USE_SYSTEM_DEPS=TRUE }

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Set Visual Studio Architecture
      if: contains(matrix.platform.name, 'Windows VS') && !contains(matrix.platform.name, 'MSBuild')
      uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: ${{ contains(matrix.platform.name, 'x86') && 'x86' || 'x64' }}

    # Although the CMake configuration will run with 3.24 on Windows and 3.22
    # elsewhere, we install 3.25 on Windows in order to support specifying
    # CMAKE_MSVC_DEBUG_INFORMATION_FORMAT which allows CCache to cache MSVC object
    # files, see: https://cmake.org/cmake/help/latest/release/3.25.html#variables
    - name: Get CMake and Ninja
      uses: lukka/get-cmake@latest
      with:
        cmakeVersion: ${{ runner.os == 'Windows' && '3.25' || '3.22' }}
        ninjaVersion: latest

    - name: Install Linux Dependencies and Tools
      if: runner.os == 'Linux'
      run: |
        CLANG_VERSION=$(clang++ --version | sed -n 's/.*version \([0-9]\+\)\..*/\1/p')
        echo "CLANG_VERSION=$CLANG_VERSION" >> $GITHUB_ENV
        sudo apt-get update && sudo apt-get install xorg-dev libxrandr-dev libxcursor-dev libxi-dev libudev-dev libflac-dev libvorbis-dev libgl1-mesa-dev libegl1-mesa-dev libdrm-dev libgbm-dev xvfb fluxbox ccache gcovr xorg-dev libx11-dev libxinerama-dev ${{ matrix.platform.name == 'Linux Clang' && 'llvm-$CLANG_VERSION' || '' }}

    - name: Remove ALSA Library
      if: runner.os == 'Linux' && matrix.platform.name != 'Android'
      run: sudo apt-get remove -y libasound2
      
    - name: Install macOS Tools
      if: runner.os == 'macOS'
      run: |
        brew update
        brew install gcovr ccache || true

    # In addition to installing a known working version of CCache, this action also takes care of saving and restoring the cache for us
    # Additionally it outputs information at the end of each job that helps us to verify if the cache is working properly
    - name: Setup CCache
      uses: hendrikmuhs/ccache-action@v1.2.12
      with:
        verbose: 2
        key: ${{ matrix.platform.name }}-${{ matrix.config.name }}-${{ matrix.type.name }}

    - name: Install Gcovr for MinGW
      if: matrix.type.name == 'Debug' && contains(matrix.platform.name, 'MinGW')
      uses: threeal/pipx-install-action@v1.0.0
      with:
        packages: gcovr

    - name: Cache MinGW
      if: matrix.platform.name == 'Windows MinGW'
      id: mingw-cache
      uses: actions/cache@v4
      with:
        path: "C:\\Program Files\\mingw64"
        key: winlibs-x86_64-posix-seh-gcc-12.2.0-llvm-16.0.0-mingw-w64msvcrt-10.0.0-r5

    - name: Install MinGW
      if: matrix.platform.name == 'Windows MinGW' && steps.mingw-cache.outputs.cache-hit != 'true'
      run: |
        curl -Lo mingw64.zip https://github.com/brechtsanders/winlibs_mingw/releases/download/12.2.0-16.0.0-10.0.0-msvcrt-r5/winlibs-x86_64-posix-seh-gcc-12.2.0-llvm-16.0.0-mingw-w64msvcrt-10.0.0-r5.zip
        unzip -qq -d "C:\Program Files" mingw64.zip

    - name: Configure CMake
      run: cmake --preset dev -DCMAKE_VERBOSE_MAKEFILE=ON ${{matrix.platform.flags}} ${{matrix.config.flags}} ${{matrix.type.flags}}

    - name: Build
      run: cmake --build build --config ${{ matrix.type.name == 'Debug' && 'Debug' || 'Release' }} --target install

  format:
    name: Formatting
    runs-on: ubuntu-22.04

    strategy:
      fail-fast: false

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Format Code
      run: cmake -DCLANG_FORMAT_EXECUTABLE=clang-format-14 -P cmake/Format.cmake

    - name: Check Formatting
      run: git diff --exit-code

  tidy:
    name: Analyzing on ${{ matrix.platform.name }}
    runs-on: ${{ matrix.platform.os }}

    strategy:
      fail-fast: false
      matrix:
        platform:
        - { name: Windows,         os: windows-2022, flags: -GNinja }
        - { name: Linux,           os: ubuntu-24.04 }
        - { name: macOS,           os: macos-12 }

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Get CMake and Ninja
      uses: lukka/get-cmake@latest
      with:
        cmakeVersion: latest
        ninjaVersion: latest

    - name: Install Windows Dependencies
      if: runner.os == 'Windows'
      run: |
        curl.exe -o run-clang-tidy https://raw.githubusercontent.com/llvm/llvm-project/llvmorg-15.0.7/clang-tools-extra/clang-tidy/tool/run-clang-tidy.py

    - name: Install Linux Dependencies
      if: runner.os == 'Linux'
      run: sudo apt-get update && sudo apt-get install libfreetype-dev libxrandr-dev libxcursor-dev libxi-dev libudev-dev libflac-dev libvorbis-dev libgl1-mesa-dev libegl1-mesa-dev libdrm-dev libgbm-dev

    - name: Install macOS Dependencies
      if: runner.os == 'macOS'
      run: |
        brew update
        brew install llvm || true
        echo /usr/local/opt/llvm/bin >> $GITHUB_PATH

    - name: Configure
      run: cmake --preset dev -DCMAKE_CXX_COMPILER=clang++ -DCMAKE_UNITY_BUILD=ON ${{matrix.platform.flags}}

    - name: Analyze Code
      run: cmake --build build --target tidy

  sanitize:
    name: Sanitizing on ${{ matrix.platform.name }}
    runs-on: ${{ matrix.platform.os }}

    strategy:
      fail-fast: false
      matrix:
        platform:
        - { name: Linux,               os: ubuntu-22.04, flags: }
        - { name: Linux DRM,           os: ubuntu-22.04, flags: -DSFML_RUN_DISPLAY_TESTS=OFF -DSFML_USE_DRM=ON }
        - { name: Linux GCC OpenGL ES, os: ubuntu-22.04, flags: -DSFML_RUN_DISPLAY_TESTS=OFF -DSFML_OPENGL_ES=ON }

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Get CMake and Ninja
      uses: lukka/get-cmake@latest
      with:
        cmakeVersion: latest
        ninjaVersion: latest

    - name: Install Linux Dependencies
      if: runner.os == 'Linux'
      run: sudo apt-get update && sudo apt-get install xorg-dev libxrandr-dev libxcursor-dev libxi-dev libudev-dev libflac-dev libvorbis-dev libgl1-mesa-dev libegl1-mesa-dev libdrm-dev libgbm-dev xvfb fluxbox && sudo apt-get remove -y libasound2

    - name: Configure
      run: cmake --preset dev -GNinja -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CXX_COMPILER=clang++ -DSFML_BUILD_EXAMPLES=OFF -DSFML_ENABLE_SANITIZERS=ON ${{matrix.platform.flags}}

    - name: Build
      run: cmake --build build
